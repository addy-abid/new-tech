"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_bootstrap_1 = require("./cli-bootstrap");
const command_1 = require("./command");
const get_stdin_1 = tslib_1.__importDefault(require("get-stdin"));
const initialize_1 = require("./initialize");
(async () => {
    if (cli_bootstrap_1.cli.flags.v) {
        cli_bootstrap_1.cli.showVersion(); // And exit successfully.
    }
    if (cli_bootstrap_1.cli.flags.h) {
        cli_bootstrap_1.cli.showHelp(0); // And exit successfully.
    }
    if (cli_bootstrap_1.cli.flags.init) {
        await initialize_1.initialize().catch(err => {
            process.stderr.write(err + '\n');
            process.exit(1);
        });
        return;
    }
    const files = cli_bootstrap_1.cli.input;
    if (files.length) {
        await command_1.command(Object.assign({ files }, cli_bootstrap_1.cli.flags)).catch(err => {
            process.stderr.write(err + '\n');
            process.exit(1);
        });
        process.exit(0);
    }
    if (usePipe()) {
        get_stdin_1.default()
            .then(async (stdin) => {
            if (stdin) {
                await command_1.command(Object.assign({ codes: stdin }, cli_bootstrap_1.cli.flags)).catch(err => {
                    process.stderr.write(err + '\n');
                    process.exit(1);
                });
                process.exit(0);
            }
            // result is empty
            cli_bootstrap_1.cli.showHelp(1);
        })
            .catch(reason => {
            // eslint-disable-next-line no-console
            console.warn(reason);
            process.exit(1);
        });
    }
    else {
        cli_bootstrap_1.cli.showHelp(1);
    }
})();
function usePipe() {
    return !process.stdin.isTTY && process.stdout.isTTY;
}
