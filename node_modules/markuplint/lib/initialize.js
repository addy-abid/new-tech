"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initialize = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const install_module_1 = require("./install-module");
const path_1 = tslib_1.__importDefault(require("path"));
const enquirer_1 = require("enquirer");
const util_1 = tslib_1.__importDefault(require("util"));
const writeFile = util_1.default.promisify(fs_1.default.writeFile);
const ruleCategories = {
    validation: {
        message: 'Are you going to conformance check according to HTML standard?',
    },
    a11y: {
        message: 'Are you going to do with accessibility better practices?',
    },
    'naming-convention': {
        message: 'Are you going to set the convention about naming?',
    },
    style: {
        message: 'Are you going to check for the code styles?',
    },
};
const defaultRules = {
    'attr-duplication': {
        category: 'validation',
        default: true,
    },
    'character-reference': {
        category: 'validation',
        default: true,
    },
    'deprecated-attr': {
        category: 'validation',
        default: true,
    },
    'deprecated-element': {
        category: 'validation',
        default: true,
    },
    doctype: {
        category: 'validation',
        default: true,
    },
    'id-duplication': {
        category: 'validation',
        default: true,
    },
    'permitted-contents': {
        category: 'validation',
        default: true,
    },
    'required-attr': {
        category: 'validation',
        default: true,
    },
    'invalid-attr': {
        category: 'validation',
        default: true,
    },
    'landmark-roles': {
        category: 'a11y',
        default: true,
    },
    'required-h1': {
        category: 'a11y',
        default: true,
    },
    'wai-aria': {
        category: 'a11y',
        default: true,
    },
    'class-naming': {
        category: 'naming-convention',
        default: false,
        recommendedValue: '/.+/',
    },
    'attr-equal-space-after': {
        category: 'style',
        default: true,
    },
    'attr-equal-space-before': {
        category: 'style',
        default: true,
    },
    'attr-spacing': {
        category: 'style',
        default: true,
    },
    'attr-value-quotes': {
        category: 'style',
        default: true,
    },
    'case-sensitive-attr-name': {
        category: 'style',
        default: true,
    },
    'case-sensitive-tag-name': {
        category: 'style',
        default: true,
    },
    indentation: {
        category: 'style',
        default: false,
        recommendedValue: 2,
    },
};
const extRExp = {
    vue: '\\.vue$',
    svelte: '\\.svelte$',
    pug: '\\.pug$',
    php: '\\.php$',
    erb: '\\.erb$',
    ejs: '\\.ejs$',
    mustache: '\\.(mustache|handlebars)$',
    nunjucks: '\\.nunjucks$',
    liquid: '\\.liquid$',
};
async function initialize() {
    const config = {};
    write('markuplit initialization');
    write.break();
    const res = await enquirer_1.prompt([
        {
            message: 'Which do you use template engines?',
            name: 'langs',
            type: 'multiselect',
            choices: [
                { name: 'React (JSX)', value: 'jsx' },
                { name: 'Vue', value: 'vue' },
                { name: 'Svelte', value: 'svelte' },
                { name: 'Pug', value: 'pug' },
                { name: 'PHP', value: 'php' },
                { name: 'eRuby', value: 'erb' },
                { name: 'EJS', value: 'ejs' },
                { name: 'Mustache/Handlebars', value: 'mustache' },
                { name: 'Nunjucks', value: 'nunjucks' },
                { name: 'liquid (Shopify)', value: 'liquid' },
            ],
            result(names) {
                // @ts-ignore
                const map = this.map(names);
                // @ts-ignore
                const values = names.map(name => map[name]);
                return values;
            },
        },
        {
            message: 'May I install them automatically?',
            name: 'autoInstall',
            type: 'confirm',
        },
        {
            message: 'Do you customize rules?',
            name: 'customize',
            type: 'confirm',
        },
    ]);
    if (res.langs && res.langs.length) {
        config.parser = {};
    }
    for (const lang of res.langs) {
        if (!config.parser) {
            continue;
        }
        // @ts-ignore
        const ext = extRExp[lang];
        if (!ext) {
            continue;
        }
        config.parser[ext] = `@markuplint/${lang}-parser`;
        if (lang === 'vue') {
            config.specs = ['@markuplint/vue-spec'];
        }
        if (lang === 'jsx') {
            config.specs = ['@markuplint/react-spec'];
        }
    }
    if (res.customize) {
        const ruleNames = Object.keys(defaultRules);
        const categories = Object.keys(ruleCategories);
        const res = await enquirer_1.prompt(categories.map(catName => {
            const cat = ruleCategories[catName];
            return {
                message: cat.message,
                name: catName,
                type: 'confirm',
            };
        }));
        for (const ruleName of ruleNames) {
            const rule = defaultRules[ruleName];
            if (!rule) {
                continue;
            }
            if (res[rule.category]) {
                if (!config.rules) {
                    config.rules = {};
                }
                config.rules[ruleName] = rule.recommendedValue || true;
            }
        }
    }
    else {
        config.rules = {};
        const ruleNames = Object.keys(defaultRules);
        for (const ruleName of ruleNames) {
            const rule = defaultRules[ruleName];
            config.rules[ruleName] = rule.default;
        }
    }
    const filePath = path_1.default.resolve(process.cwd(), '.markuplintrc');
    await writeFile(filePath, JSON.stringify(config, null, 2), { encoding: 'utf-8' });
    write(`✨Created: ${filePath}`);
    if (res.autoInstall) {
        write('Install automatically');
        const modules = ['markuplint', ...res.langs.map(lang => `@markuplint/${lang}-parser`)];
        if (res.langs.includes('vue')) {
            modules.push('@markuplint/vue-spec');
        }
        if (res.langs.includes('jsx')) {
            modules.push('@markuplint/react-spec');
        }
        const result = await install_module_1.installModule(modules, true).catch(e => new Error(e));
        if (result instanceof Error) {
            error.exit();
            return;
        }
        if (result.alreadyExists) {
            write('Modules are installed already.');
        }
        else {
            write('✨ Success');
        }
    }
}
exports.initialize = initialize;
function write(message) {
    process.stdout.write(message + '\n');
}
write.break = () => process.stdout.write('\n');
function error(message) {
    process.stderr.write(message + '\n');
}
error.exit = () => process.exit(1);
