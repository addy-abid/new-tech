"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNode = void 0;
const tslib_1 = require("tslib");
const ml_ast_1 = require("@markuplint/ml-ast");
const tokens_1 = require("../tokens");
const preprocessor_specific_block_1 = tslib_1.__importDefault(require("../tokens/preprocessor-specific-block"));
function createNode(astNode, document, pearNode) {
    const _astNode = astNode;
    switch (_astNode.type) {
        case ml_ast_1.MLASTNodeType.Doctype: {
            return new tokens_1.MLDOMDoctype(_astNode, document);
        }
        case ml_ast_1.MLASTNodeType.StartTag: {
            return new tokens_1.MLDOMElement(_astNode, document);
        }
        case ml_ast_1.MLASTNodeType.EndTag: {
            return new tokens_1.MLDOMElementCloseTag(_astNode, document, pearNode);
        }
        case ml_ast_1.MLASTNodeType.PreprocessorSpecificBlock: {
            return new preprocessor_specific_block_1.default(_astNode, document);
        }
        case ml_ast_1.MLASTNodeType.Comment: {
            return new tokens_1.MLDOMComment(_astNode, document);
        }
        case ml_ast_1.MLASTNodeType.Text: {
            return new tokens_1.MLDOMText(_astNode, document);
        }
        case ml_ast_1.MLASTNodeType.OmittedTag: {
            return new tokens_1.MLDOMOmittedElement(_astNode, document);
        }
    }
    throw new TypeError(`Invalid AST node typs "${astNode.type}"`);
}
exports.createNode = createNode;
