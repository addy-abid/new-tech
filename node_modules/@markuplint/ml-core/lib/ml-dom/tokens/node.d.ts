import { AnonymousNode, IMLDOMNode, NodeType } from '../types';
import { MLASTAbstructNode } from '@markuplint/ml-ast';
import { RuleConfigValue } from '@markuplint/ml-config';
import Document from '../document';
import MLDOMElement from './element';
import MLDOMIndentation from './indentation';
import MLDOMOmittedElement from './omitted-element';
import MLDOMToken from './token';
import { RuleInfo } from '../../';
export default abstract class MLDOMNode<T extends RuleConfigValue, O = null, A extends MLASTAbstructNode = MLASTAbstructNode> extends MLDOMToken<A> implements IMLDOMNode {
    #private;
    readonly type: NodeType;
    protected _astToken: A;
    constructor(astNode: A, document: Document<T, O>);
    get parentNode(): MLDOMElement<T, O> | MLDOMOmittedElement<T, O> | null;
    get prevNode(): AnonymousNode<T, O> | null;
    get nextNode(): AnonymousNode<T, O> | null;
    get syntaxicalParentNode(): MLDOMElement<T, O> | null;
    get prevToken(): AnonymousNode<T, O> | null;
    get nodeStore(): import("../helper").NodeStore;
    toString(): string;
    is(type: NodeType): boolean;
    get indentation(): MLDOMIndentation<T, O> | null;
    get rule(): RuleInfo<T, O>;
    private _isFirstToken;
}
