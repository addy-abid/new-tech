import { AnonymousNode, Document } from '../';
import { MLASTElement, MLToken } from '@markuplint/ml-ast';
import { MLDOMAttribute, MLDOMElementCloseTag, MLDOMNode, MLDOMText, MLDOMToken } from './';
import { ContentModel } from '@markuplint/ml-spec';
import { IMLDOMElement } from '../types';
import MLDOMPreprocessorSpecificAttribute from './preprocessor-specific-attribute';
import { RuleConfigValue } from '@markuplint/ml-config';
export default class MLDOMElement<T extends RuleConfigValue, O = null> extends MLDOMNode<T, O, MLASTElement> implements IMLDOMElement {
    #private;
    readonly type = "Element";
    readonly nodeName: string;
    readonly attributes: (MLDOMAttribute | MLDOMPreprocessorSpecificAttribute)[];
    readonly hasSpreadAttr: boolean;
    readonly namespaceURI: string;
    readonly isForeignElement: boolean;
    readonly closeTag: MLDOMElementCloseTag<T, O> | null;
    readonly selfClosingSolidus: MLDOMToken<MLToken> | null;
    readonly endSpace: MLDOMToken<MLToken> | null;
    readonly ownModels: Set<ContentModel>;
    readonly childModels: Set<ContentModel>;
    readonly descendantModels: Set<ContentModel>;
    readonly isCustomElement: boolean;
    constructor(astNode: MLASTElement, document: Document<T, O>);
    get raw(): string;
    get childNodes(): AnonymousNode<T, O>[];
    querySelectorAll(selector: string): (MLDOMElement<T, O> | MLDOMText<T, O>)[];
    closest(selector: string): MLDOMElement<T, O> | null;
    getAttributeToken(attrName: string): (MLDOMAttribute | MLDOMPreprocessorSpecificAttribute)[];
    getAttribute(attrName: string): string | null;
    hasAttribute(attrName: string): boolean;
    matches(selector: string): boolean;
    fixNodeName(name: string): void;
    getChildElementsAndTextNodeWithoutWhitespaces(): (MLDOMElement<T, O> | MLDOMText<T, O>)[];
    /**
     * This element has "Preprocessor Specific Block". In other words, Its children are potentially mutable.
     */
    hasMutableChildren(): boolean;
    isDescendantByUUIDList(uuidList: string[]): boolean;
    getNameLocation(): {
        offset: number;
        line: number;
        col: number;
    };
    get classList(): string[];
    get id(): string;
}
