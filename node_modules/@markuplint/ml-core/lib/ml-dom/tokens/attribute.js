"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const token_1 = tslib_1.__importDefault(require("./token"));
class MLDOMAttribute extends token_1.default {
    constructor(astToken) {
        super(astToken);
        this.attrType = 'html-attr';
        this.spacesBeforeName = new token_1.default(this._astToken.spacesBeforeName);
        this.name = new token_1.default(this._astToken.name);
        this.spacesBeforeEqual = new token_1.default(this._astToken.spacesBeforeEqual);
        this.equal = new token_1.default(this._astToken.equal);
        this.spacesAfterEqual = new token_1.default(this._astToken.spacesAfterEqual);
        this.startQuote = new token_1.default(this._astToken.startQuote);
        this.value = new token_1.default(this._astToken.value);
        this.endQuote = new token_1.default(this._astToken.endQuote);
        this.isDynamicValue = astToken.isDynamicValue;
        this.isDirective = astToken.isDirective;
        this.potentialName = astToken.potentialName || this.name.raw;
        this.isInvalid = astToken.isInvalid;
        this.candidate = astToken.candidate;
        this.isDuplicatable = astToken.isDuplicatable;
    }
    get raw() {
        const raw = [this.name.raw];
        if (this.equal.raw === '=') {
            raw.push(this.spacesBeforeEqual.raw);
            raw.push(this.equal.raw);
            raw.push(this.spacesAfterEqual.raw);
            raw.push(this.startQuote.raw);
            raw.push(this.value.raw);
            raw.push(this.endQuote.raw);
        }
        return raw.join('');
    }
    get startOffset() {
        return this.name.startOffset;
    }
    get endOffset() {
        return this.endQuote.endOffset;
    }
    get startLine() {
        return this.name.startLine;
    }
    get endLine() {
        return this.endQuote.endLine;
    }
    get startCol() {
        return this.name.startCol;
    }
    get endCol() {
        return this.endQuote.endCol;
    }
    getName() {
        return {
            line: this.name.startLine,
            col: this.name.startCol,
            potential: this.potentialName,
            raw: this.name.raw,
        };
    }
    getValue() {
        return {
            line: this.value.startLine,
            col: this.value.startCol,
            potential: this.value.raw,
            raw: this.value.raw,
        };
    }
    toString(withSpace = true) {
        return (withSpace ? this.spacesBeforeName.raw : '') + this.raw;
    }
}
exports.default = MLDOMAttribute;
