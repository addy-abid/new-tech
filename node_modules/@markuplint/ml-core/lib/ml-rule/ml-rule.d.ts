import { RuleConfig, RuleConfigValue, RuleInfo, Severity, VerifiedResult } from '@markuplint/ml-config';
import Document from '../ml-dom/document';
import { I18n } from '@markuplint/i18n';
import { MLRuleOptions } from './types';
export declare class MLRule<T extends RuleConfigValue, O = null> {
    #private;
    static create<T extends RuleConfigValue, O = null>(options: MLRuleOptions<T, O>): MLRule<T, O>;
    readonly name: string;
    readonly defaultServerity: Severity;
    readonly defaultValue: T;
    readonly defaultOptions: O;
    /**
     * The following getter is unused internally,
     * only for extending from 3rd party library
     */
    protected get v(): MLRuleOptions<T, O>['verify'];
    /**
     * The following getter is unused internally,
     * only for extending from 3rd party library
     */
    protected get f(): MLRuleOptions<T, O>['fix'];
    private constructor();
    verify(document: Document<T, O>, i18n: I18n, rule: RuleInfo<T, O>): Promise<VerifiedResult[]>;
    fix(document: Document<T, O>, rule: RuleInfo<T, O>): Promise<void>;
    optimizeOption(configSettings: T | RuleConfig<T, O>): RuleInfo<T, O>;
}
