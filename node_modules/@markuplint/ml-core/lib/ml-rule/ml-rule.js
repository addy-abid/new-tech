"use strict";
var _MLRule_v, _MLRule_f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MLRule = void 0;
const tslib_1 = require("tslib");
class MLRule {
    constructor(o) {
        _MLRule_v.set(this, void 0);
        _MLRule_f.set(this, void 0);
        this.name = o.name;
        this.defaultServerity = o.defaultLevel || 'error';
        this.defaultValue = o.defaultValue;
        this.defaultOptions = o.defaultOptions;
        tslib_1.__classPrivateFieldSet(this, _MLRule_v, o.verify, "f");
        tslib_1.__classPrivateFieldSet(this, _MLRule_f, o.fix, "f");
    }
    static create(options) {
        return new MLRule(options);
    }
    /**
     * The following getter is unused internally,
     * only for extending from 3rd party library
     */
    get v() {
        return tslib_1.__classPrivateFieldGet(this, _MLRule_v, "f");
    }
    /**
     * The following getter is unused internally,
     * only for extending from 3rd party library
     */
    get f() {
        return tslib_1.__classPrivateFieldGet(this, _MLRule_f, "f");
    }
    async verify(document, i18n, rule) {
        if (!tslib_1.__classPrivateFieldGet(this, _MLRule_v, "f")) {
            return [];
        }
        document.setRule(this);
        const results = await tslib_1.__classPrivateFieldGet(this, _MLRule_v, "f").call(this, document, i18n.translator(), rule);
        document.setRule(null);
        return results.map(result => {
            return {
                severity: result.severity,
                message: result.message,
                line: result.line,
                col: result.col,
                raw: result.raw,
                ruleId: this.name,
            };
        });
    }
    async fix(document, rule) {
        if (!tslib_1.__classPrivateFieldGet(this, _MLRule_f, "f")) {
            return;
        }
        document.setRule(this);
        await tslib_1.__classPrivateFieldGet(this, _MLRule_f, "f").call(this, document, rule);
        document.setRule(null);
    }
    optimizeOption(configSettings) {
        if (typeof configSettings === 'boolean') {
            return {
                disabled: !configSettings,
                severity: this.defaultServerity,
                value: this.defaultValue,
                option: this.defaultOptions,
            };
        }
        if (!Array.isArray(configSettings) && typeof configSettings === 'object' && configSettings !== null) {
            return {
                disabled: false,
                severity: configSettings.severity || this.defaultServerity,
                value: configSettings.value !== undefined ? configSettings.value : this.defaultValue,
                option: Array.isArray(this.defaultOptions)
                    ? configSettings.option
                        ? // prettier-ignore
                            // @ts-ignore for "as" casting
                            this.defaultOptions.concat(configSettings.option)
                        : this.defaultOptions
                    : this.defaultOptions !== null &&
                        typeof this.defaultOptions === 'object' &&
                        // for example `configSettings.option === true`
                        (configSettings.option == null || typeof configSettings.option === 'object')
                        ? Object.assign(Object.assign({}, this.defaultOptions), (configSettings.option || {})) : configSettings.option || this.defaultOptions,
            };
        }
        return {
            disabled: false,
            severity: this.defaultServerity,
            // @ts-ignore TODO: Wait for fix to bug of type guards in TypeScript
            value: configSettings == null ? this.defaultValue : configSettings,
            option: this.defaultOptions,
        };
    }
}
exports.MLRule = MLRule;
_MLRule_v = new WeakMap(), _MLRule_f = new WeakMap();
