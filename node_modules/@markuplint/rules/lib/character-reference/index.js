"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ml_core_1 = require("@markuplint/ml-core");
const defaultChars = ['"', '&', '<', '>'];
const ignoreParentElement = ['script', 'style'];
exports.default = ml_core_1.createRule({
    name: 'character-reference',
    defaultValue: true,
    defaultOptions: null,
    async verify(document, translate) {
        const reports = [];
        const targetNodes = [];
        await document.walkOn('Text', async (node) => {
            if (node.parentNode && ignoreParentElement.includes(node.parentNode.nodeName.toLowerCase())) {
                return;
            }
            const severity = node.rule.severity;
            const ms = severity === 'error' ? 'must' : 'should';
            const message = translate(`{0} ${ms} {1}`, 'Illegal characters', 'escape in character reference');
            targetNodes.push({
                severity,
                line: node.startLine,
                col: node.startCol,
                raw: node.raw,
                message,
            });
        });
        await document.walkOn('Element', async (node) => {
            const severity = node.rule.severity;
            const ms = severity === 'error' ? 'must' : 'should';
            const message = translate(`{0} ${ms} {1}`, 'Illegal characters', 'escape in character reference');
            for (const attr of node.attributes) {
                if (attr.attrType === 'ps-attr' ||
                    (attr.attrType === 'html-attr' && attr.isDynamicValue) ||
                    (attr.attrType === 'html-attr' && attr.isDirective)) {
                    continue;
                }
                const value = attr.getValue();
                targetNodes.push({
                    severity,
                    line: value.line,
                    col: value.col,
                    raw: value.raw,
                    message,
                });
            }
        });
        for (const targetNode of targetNodes) {
            const escapedText = targetNode.raw.replace(/&(?:[a-z]+|#[0-9]+|x[0-9]);/gi, $0 => '*'.repeat($0.length));
            ml_core_1.getLocationFromChars(defaultChars, escapedText, targetNode.line, targetNode.col).forEach(location => {
                reports.push(Object.assign({ severity: targetNode.severity, message: targetNode.message }, location));
            });
        }
        return reports;
    },
});
