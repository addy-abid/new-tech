"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ml_core_1 = require("@markuplint/ml-core");
const helpers_1 = require("../helpers");
const type_check_1 = require("../type-check");
exports.default = ml_core_1.createRule({
    name: 'invalid-attr',
    defaultLevel: 'error',
    defaultValue: true,
    defaultOptions: {},
    async verify(document, translate) {
        const reports = [];
        await document.walkOn('Element', async (node) => {
            const attrSpecs = helpers_1.getAttrSpecs(node.nodeName, document.specs);
            for (const attr of node.attributes) {
                if (attr.attrType === 'html-attr' && attr.isDirective) {
                    continue;
                }
                const attrName = attr.getName();
                const name = attrName.potential;
                if (!node.isCustomElement && attr.attrType === 'html-attr' && attr.isInvalid) {
                    const candidate = attr.candidate;
                    const message = `The "${attrName.raw}" attribute is not allowed.` +
                        (candidate ? ` Did you mean "${candidate}"?` : '');
                    reports.push({
                        severity: node.rule.severity,
                        message: message,
                        line: attrName.line,
                        col: attrName.col,
                        raw: attrName.raw,
                    });
                }
                const attrValue = attr.getValue();
                const value = attrValue.raw;
                if (node.rule.option.ignoreAttrNamePrefix) {
                    const ignoreAttrNamePrefixes = Array.isArray(node.rule.option.ignoreAttrNamePrefix)
                        ? node.rule.option.ignoreAttrNamePrefix
                        : [node.rule.option.ignoreAttrNamePrefix];
                    if (ignoreAttrNamePrefixes.some(prefix => name.indexOf(prefix) === 0)) {
                        continue;
                    }
                }
                let invalid = false;
                const customRule = node.rule.option.attrs ? node.rule.option.attrs[name] : null;
                if (customRule) {
                    if ('enum' in customRule) {
                        invalid = type_check_1.typeCheck(name.toLowerCase(), value, true, {
                            name,
                            type: 'String',
                            enum: customRule.enum,
                            description: '',
                        });
                    }
                    else if ('pattern' in customRule) {
                        if (!helpers_1.match(value, customRule.pattern)) {
                            invalid = {
                                invalidType: 'invalid-value',
                                message: `The "${name}" attribute expect custom pattern "${customRule.pattern}"`,
                            };
                        }
                    }
                    else if ('type' in customRule) {
                        invalid = type_check_1.typeCheck(name, value, true, { name, type: customRule.type, description: '' });
                    }
                }
                else if (!node.isCustomElement && attrSpecs) {
                    invalid = helpers_1.isValidAttr(name, value, (attr.attrType === 'html-attr' && attr.isDynamicValue) || false, node, attrSpecs);
                }
                if (invalid) {
                    switch (invalid.invalidType) {
                        case 'invalid-value': {
                            reports.push({
                                severity: node.rule.severity,
                                message: invalid.message,
                                line: attrValue.line,
                                col: attrValue.col,
                                raw: value,
                            });
                            break;
                        }
                        case 'non-existent': {
                            reports.push({
                                severity: node.rule.severity,
                                message: invalid.message,
                                line: attrName.line,
                                col: attrName.col,
                                raw: attrName.raw,
                            });
                        }
                    }
                }
            }
        });
        return reports;
    },
});
