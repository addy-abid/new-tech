"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ml_core_1 = require("@markuplint/ml-core");
const alwaysMsg = 'Always insert {0} before {1} of {2}';
const neverMsg = 'Never insert {0} before {1} of {2}';
exports.default = ml_core_1.createRule({
    name: 'attr-equal-space-before',
    defaultLevel: 'warning',
    defaultValue: 'never',
    defaultOptions: null,
    async verify(document, translate) {
        const reports = [];
        await document.walkOn('Element', async (node) => {
            for (const attr of node.attributes) {
                if (attr.attrType === 'ps-attr' || !(attr.equal && attr.spacesAfterEqual && attr.spacesBeforeEqual)) {
                    continue;
                }
                const hasSpace = !!attr.spacesBeforeEqual.raw;
                const hasLineBreak = /\r?\n/.test(attr.spacesBeforeEqual.raw);
                let isBad = false;
                let rawMessage;
                switch (node.rule.value) {
                    case 'always': {
                        isBad = !hasSpace;
                        rawMessage = alwaysMsg;
                        break;
                    }
                    case 'never': {
                        isBad = hasSpace;
                        rawMessage = neverMsg;
                        break;
                    }
                    case 'always-single-line': {
                        // or 'no-newline'
                        isBad = !hasSpace || hasLineBreak;
                        rawMessage = alwaysMsg;
                        break;
                    }
                    case 'never-single-line': {
                        isBad = hasSpace && !hasLineBreak;
                        rawMessage = neverMsg;
                        break;
                    }
                }
                if (isBad) {
                    reports.push({
                        severity: node.rule.severity,
                        message: translate(rawMessage, 'space', 'equal sign', 'attribute'),
                        line: attr.spacesBeforeEqual.startLine,
                        col: attr.spacesBeforeEqual.startCol,
                        raw: attr.spacesBeforeEqual.raw + attr.equal.raw + attr.spacesAfterEqual.raw,
                    });
                }
            }
        });
        return reports;
    },
    async fix(document) {
        await document.walkOn('Element', async (node) => {
            for (const attr of node.attributes) {
                if (attr.attrType === 'ps-attr' || !(attr.equal && attr.spacesAfterEqual && attr.spacesBeforeEqual)) {
                    continue;
                }
                const hasSpace = !!attr.spacesBeforeEqual.raw;
                const hasLineBreak = /\r?\n/.test(attr.spacesBeforeEqual.raw);
                switch (node.rule.value) {
                    case 'always': {
                        if (!hasSpace) {
                            attr.spacesBeforeEqual.fix(' ');
                        }
                        break;
                    }
                    case 'never': {
                        attr.spacesBeforeEqual.fix('');
                        break;
                    }
                    case 'always-single-line': {
                        // or 'no-newline'
                        if (!hasSpace || hasLineBreak) {
                            attr.spacesBeforeEqual.fix(' ');
                        }
                        break;
                    }
                    case 'never-single-line': {
                        if (hasSpace && !hasLineBreak) {
                            attr.spacesBeforeEqual.fix('');
                        }
                        break;
                    }
                }
            }
        });
    },
});
