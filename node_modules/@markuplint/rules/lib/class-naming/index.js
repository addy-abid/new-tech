"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ml_core_1 = require("@markuplint/ml-core");
const helpers_1 = require("../helpers");
exports.default = ml_core_1.createRule({
    name: 'class-naming',
    defaultLevel: 'warning',
    defaultValue: null,
    defaultOptions: null,
    async verify(document, translate) {
        const reports = [];
        await document.walkOn('Element', async (node) => {
            if (node.rule.value) {
                const classPatterns = Array.isArray(node.rule.value) ? node.rule.value : [node.rule.value];
                const attrs = node.getAttributeToken('class');
                for (const attr of attrs) {
                    if (attr.attrType === 'html-attr' && attr.isDynamicValue) {
                        continue;
                    }
                    const classAttr = attr.getValue();
                    const classList = classAttr.potential
                        .split(/\s+/g)
                        .map(c => c.trim())
                        .filter(c => c);
                    for (const className of classList) {
                        if (!classPatterns.some(pattern => helpers_1.match(className, pattern))) {
                            reports.push({
                                severity: node.rule.severity,
                                message: translate('{0} {1} is unmatched patterns ({2})', `"${className}"`, 'class name', `"${classPatterns.join('", "')}"`),
                                line: classAttr.line,
                                col: classAttr.col,
                                raw: classAttr.raw,
                            });
                        }
                    }
                }
            }
        });
        return reports;
    },
});
