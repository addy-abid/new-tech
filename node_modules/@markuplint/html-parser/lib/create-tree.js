"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTree = void 0;
const tslib_1 = require("tslib");
const ml_ast_1 = require("@markuplint/ml-ast");
const parser_utils_1 = require("@markuplint/parser-utils");
const parse5_1 = tslib_1.__importDefault(require("parse5"));
const parse_raw_tag_1 = tslib_1.__importDefault(require("./parse-raw-tag"));
const P5_OPTIONS = { sourceCodeLocationInfo: true };
function createTree(rawCode, isFragment, offsetOffset, offsetLine, offsetColumn) {
    const doc = isFragment
        ? parse5_1.default.parseFragment(rawCode, P5_OPTIONS)
        : parse5_1.default.parse(rawCode, P5_OPTIONS);
    return createTreeRecursive(doc, null, rawCode, offsetOffset, offsetLine, offsetColumn);
}
exports.createTree = createTree;
function createTreeRecursive(rootNode, parentNode, rawHtml, offsetOffset, offsetLine, offsetColumn) {
    const nodeList = [];
    const childNodes = getChildNodes(rootNode);
    let prevNode = null;
    for (const p5node of childNodes) {
        const node = nodeize(p5node, prevNode, parentNode, rawHtml, offsetOffset, offsetLine, offsetColumn);
        if (!node) {
            continue;
        }
        if (prevNode) {
            if (node.type !== ml_ast_1.MLASTNodeType.EndTag) {
                prevNode.nextNode = node;
            }
            node.prevNode = prevNode;
        }
        prevNode = node;
        nodeList.push(node);
    }
    return nodeList;
}
function nodeize(originNode, prevNode, parentNode, rawHtml, offsetOffset, offsetLine, offsetColumn) {
    const nextNode = null;
    const location = getLocation(originNode);
    if (!location) {
        const prevToken = prevNode || parentNode;
        const startOffset = prevToken ? prevToken.endOffset : 0;
        const endOffset = prevToken ? prevToken.endOffset : 0;
        const startLine = prevToken ? prevToken.endLine : 0;
        const endLine = prevToken ? prevToken.endLine : 0;
        const startCol = prevToken ? prevToken.endCol : 0;
        const endCol = prevToken ? prevToken.endCol : 0;
        const node = {
            uuid: parser_utils_1.uuid(),
            raw: '',
            startOffset: startOffset + offsetOffset,
            endOffset: endOffset + offsetOffset,
            startLine: startLine + offsetLine,
            endLine: endLine + offsetLine,
            startCol: startCol + (startLine === 1 ? offsetColumn : 0),
            endCol: endCol + (endLine === 1 ? offsetColumn : 0),
            nodeName: originNode.nodeName,
            type: ml_ast_1.MLASTNodeType.OmittedTag,
            namespace: getNamespace(originNode),
            parentNode,
            prevNode,
            nextNode,
            isFragment: false,
            isGhost: true,
            isCustomElement: false,
        };
        node.childNodes = createTreeRecursive(originNode, node, rawHtml, offsetOffset, offsetLine, offsetColumn);
        return node;
    }
    const { startOffset, endOffset, startLine, endLine, startCol, endCol } = location;
    const raw = rawHtml.slice(startOffset, endOffset || startOffset);
    switch (originNode.nodeName) {
        case '#documentType': {
            return {
                uuid: parser_utils_1.uuid(),
                raw,
                // @ts-ignore
                name: originNode.name || '',
                // @ts-ignore
                publicId: originNode.publicId || '',
                // @ts-ignore
                systemId: originNode.systemId || '',
                startOffset: startOffset + offsetOffset,
                endOffset: endOffset + offsetOffset,
                startLine: startLine + offsetLine,
                endLine: endLine + offsetLine,
                startCol: startCol + (startLine === 1 ? offsetColumn : 0),
                endCol: endCol + (endLine === 1 ? offsetColumn : 0),
                nodeName: '#doctype',
                type: ml_ast_1.MLASTNodeType.Doctype,
                parentNode,
                prevNode,
                _addPrevNode: 102,
                nextNode,
                isFragment: false,
                isGhost: false,
            };
        }
        case '#text': {
            const node = {
                uuid: parser_utils_1.uuid(),
                raw,
                startOffset: startOffset + offsetOffset,
                endOffset: endOffset + offsetOffset,
                startLine: startLine + offsetLine,
                endLine: endLine + offsetLine,
                startCol: startCol + (startLine === 1 ? offsetColumn : 0),
                endCol: endCol + (endLine === 1 ? offsetColumn : 0),
                nodeName: '#text',
                type: ml_ast_1.MLASTNodeType.Text,
                parentNode,
                prevNode,
                nextNode,
                isFragment: false,
                isGhost: false,
            };
            return node;
        }
        case '#comment': {
            return {
                uuid: parser_utils_1.uuid(),
                raw,
                startOffset: startOffset + offsetOffset,
                endOffset: endOffset + offsetOffset,
                startLine: startLine + offsetLine,
                endLine: endLine + offsetLine,
                startCol: startCol + (startLine === 1 ? offsetColumn : 0),
                endCol: endCol + (endLine === 1 ? offsetColumn : 0),
                nodeName: '#comment',
                type: ml_ast_1.MLASTNodeType.Comment,
                parentNode,
                prevNode,
                nextNode,
                isFragment: false,
                isGhost: false,
            };
        }
        default: {
            const tagLoc = 'startTag' in location ? location.startTag : null;
            const startTagRaw = tagLoc
                ? rawHtml.slice(tagLoc.startOffset, tagLoc.endOffset)
                : rawHtml.slice(startOffset, endOffset || startOffset);
            const tagTokens = parse_raw_tag_1.default(startTagRaw, startLine, startCol, startOffset, offsetOffset, offsetLine, offsetColumn);
            const tagName = tagTokens.tagName;
            const isCustomElement = parser_utils_1.isPotentialCustomElementName(tagName);
            let endTag = null;
            const endTagLoc = 'endTag' in location ? location.endTag : null;
            if (endTagLoc) {
                const { startOffset, endOffset, startLine, endLine, startCol, endCol } = endTagLoc;
                const endTagRaw = rawHtml.slice(startOffset, endOffset);
                const endTagTokens = parse_raw_tag_1.default(endTagRaw, startLine, startCol, startOffset, offsetOffset, offsetLine, offsetColumn);
                const endTagName = endTagTokens.tagName;
                endTag = {
                    uuid: parser_utils_1.uuid(),
                    raw: endTagRaw,
                    startOffset: startOffset + offsetOffset,
                    endOffset: endOffset + offsetOffset,
                    startLine: startLine + offsetLine,
                    endLine: endLine + offsetLine,
                    startCol: startCol + (startLine === 1 ? offsetColumn : 0),
                    endCol: endCol + (endLine === 1 ? offsetColumn : 0),
                    nodeName: endTagName,
                    type: ml_ast_1.MLASTNodeType.EndTag,
                    namespace: getNamespace(originNode),
                    attributes: endTagTokens.attrs,
                    parentNode,
                    prevNode,
                    nextNode,
                    pearNode: null,
                    isFragment: false,
                    isGhost: false,
                    tagOpenChar: '</',
                    tagCloseChar: '>',
                    isCustomElement,
                };
            }
            const _endOffset = startOffset + startTagRaw.length;
            const _endLine = parser_utils_1.getEndLine(startTagRaw, startLine);
            const _endCol = parser_utils_1.getEndCol(startTagRaw, startCol);
            const startTag = {
                uuid: parser_utils_1.uuid(),
                raw: startTagRaw,
                startOffset: startOffset + offsetOffset,
                endOffset: _endOffset + offsetOffset,
                startLine: startLine + offsetLine,
                endLine: _endLine + offsetLine,
                startCol: startCol + (startLine === 1 ? offsetColumn : 0),
                endCol: _endCol + (startLine === _endLine ? offsetColumn : 0),
                nodeName: tagName,
                type: ml_ast_1.MLASTNodeType.StartTag,
                namespace: getNamespace(originNode),
                attributes: tagTokens.attrs,
                hasSpreadAttr: false,
                parentNode,
                prevNode,
                nextNode,
                pearNode: endTag,
                selfClosingSolidus: tagTokens.selfClosingSolidus,
                endSpace: tagTokens.endSpace,
                isFragment: false,
                isGhost: false,
                tagOpenChar: '<',
                tagCloseChar: '>',
                isCustomElement,
            };
            if (endTag) {
                endTag.pearNode = startTag;
            }
            startTag.childNodes = createTreeRecursive(originNode, startTag, rawHtml, offsetOffset, offsetLine, offsetColumn);
            return startTag;
        }
    }
}
/**
 * getChildNodes
 *
 * - If node has "content" property then parse as document fragment.
 * - If node is <noscript> then that childNodes is a TextNode. But parse as document fragment it for disabled script.
 */
function getChildNodes(rootNode) {
    if (rootNode.nodeName === 'noscript') {
        const textNode = rootNode.childNodes[0];
        if (!textNode || textNode.nodeName !== '#text') {
            return [];
        }
        // @ts-ignore
        const html = textNode.value;
        // @ts-ignore
        const { startOffset, startLine, startCol } = textNode.sourceCodeLocation;
        const breakCount = startLine - 1;
        const indentWidth = startCol - 1;
        const offsetSpaces = ' '.repeat(startOffset - Math.max(breakCount, 0) - Math.max(indentWidth, 0)) +
            '\n'.repeat(breakCount) +
            ' '.repeat(indentWidth);
        const fragment = parse5_1.default.parseFragment(`${offsetSpaces}${html}`, P5_OPTIONS);
        const childNodes = fragment.childNodes.slice(offsetSpaces ? 1 : 0);
        // const childNodes = ('childNodes' in _childNodes && _childNodes.childNodes) || [];
        return childNodes;
    }
    return rootNode.content ? rootNode.content.childNodes : rootNode.childNodes || [];
}
function hasLocation(node) {
    return 'sourceCodeLocation' in node;
}
function getLocation(node) {
    if (hasLocation(node) && node.sourceCodeLocation) {
        return node.sourceCodeLocation;
    }
    return null;
}
function getNamespace(node) {
    if ('namespaceURI' in node) {
        return node.namespaceURI;
    }
    return '';
}
