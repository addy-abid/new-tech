"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.margeConfig = exports.recursiveLoad = exports.load = exports.search = void 0;
const tslib_1 = require("tslib");
const _1 = require("./");
const cosmiconfig_1 = require("cosmiconfig");
const path_1 = tslib_1.__importDefault(require("path"));
const explorer = cosmiconfig_1.cosmiconfig('markuplint');
async function search(dir, cacheClear) {
    if (!cacheClear) {
        explorer.clearCaches();
    }
    dir = path_1.default.dirname(dir);
    const result = await explorer.search(dir);
    if (!result || result.isEmpty) {
        return null;
    }
    return {
        filePath: result.filepath,
        config: result.config,
    };
}
exports.search = search;
async function load(filePath, cacheClear) {
    if (!cacheClear) {
        explorer.clearCaches();
    }
    const result = await explorer.load(filePath);
    if (!result || result.isEmpty) {
        return null;
    }
    return {
        filePath: result.filepath,
        config: result.config,
    };
}
exports.load = load;
async function recursiveLoad(config, filePath, files, cacheClear) {
    const errs = [];
    const baseDir = path_1.default.dirname(filePath);
    if (config.extends) {
        const extendFiles = Array.isArray(config.extends) ? config.extends : [config.extends];
        for (const _file of extendFiles) {
            if (/^\.+\//.test(_file)) {
                const file = path_1.default.resolve(path_1.default.join(baseDir, _file));
                if (files.has(file)) {
                    continue;
                }
                const extendFileResult = await _1.loadConfigFile(file, true, cacheClear);
                if (!extendFileResult) {
                    continue;
                }
                files = new Set(files).add(file);
                config = margeConfig(extendFileResult.config, config);
            }
            else {
                try {
                    const mod = await Promise.resolve().then(() => tslib_1.__importStar(require(_file)));
                    // @ts-ignore
                    delete mod.default;
                    files.add(_file);
                    config = margeConfig(mod, config);
                }
                catch (err) {
                    errs.push(err);
                }
            }
        }
    }
    delete config.extends;
    return {
        files,
        config,
        errs,
    };
}
exports.recursiveLoad = recursiveLoad;
function margeConfig(a, b) {
    return Object.assign(Object.assign(Object.assign({}, a), b), { rules: Object.assign(Object.assign({}, a.rules), b.rules), nodeRules: [...(a.nodeRules || []), ...(b.nodeRules || [])], childNodeRules: [...(a.childNodeRules || []), ...(b.childNodeRules || [])] });
}
exports.margeConfig = margeConfig;
