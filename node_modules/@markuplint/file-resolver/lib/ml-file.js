"use strict";
var _MLFile_filePath;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MLFile = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const minimatch_1 = tslib_1.__importDefault(require("minimatch"));
const path_1 = tslib_1.__importDefault(require("path"));
const util_1 = tslib_1.__importDefault(require("util"));
const stat = util_1.default.promisify(fs_1.default.stat);
const readFile = util_1.default.promisify(fs_1.default.readFile);
const fileCaches = new WeakMap();
class MLFile {
    /**
     *
     * @param filePathOrContext A file path or context
     * @param anonymous if 1st param is a context
     * @param workspace context of workspace if anonymous is true
     * @param name context of name
     */
    constructor(filePathOrContext, anonymous = false, workspace = process.cwd(), name = '<AnonymousFile>') {
        _MLFile_filePath.set(this, void 0);
        this.anonymous = anonymous;
        if (anonymous) {
            tslib_1.__classPrivateFieldSet(this, _MLFile_filePath, path_1.default.resolve(workspace, name), "f");
            // `filePath` is context
            fileCaches.set(this, filePathOrContext);
        }
        else {
            tslib_1.__classPrivateFieldSet(this, _MLFile_filePath, path_1.default.resolve(filePathOrContext), "f");
        }
    }
    get path() {
        return tslib_1.__classPrivateFieldGet(this, _MLFile_filePath, "f");
    }
    async isExist() {
        return !!(await stat(tslib_1.__classPrivateFieldGet(this, _MLFile_filePath, "f")));
    }
    async getContext() {
        return fileCaches.get(this) || (await this._fetch());
    }
    matches(globPath) {
        return minimatch_1.default(tslib_1.__classPrivateFieldGet(this, _MLFile_filePath, "f"), globPath);
    }
    async _fetch() {
        const context = await readFile(tslib_1.__classPrivateFieldGet(this, _MLFile_filePath, "f"), { encoding: 'utf-8' });
        fileCaches.set(this, context);
        return context;
    }
}
exports.MLFile = MLFile;
_MLFile_filePath = new WeakMap();
